============================= test session starts ==============================
platform linux -- Python 3.7.7, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/tatsunori/workspaces/github-com/individual/quantum-simulator, inifile: pytest.ini
plugins: mock-3.1.0
collected 217 items

tests/base/test_observable.py ...F..F.........                           [  7%]
tests/base/test_pure_qubits.py .............................FF.......... [ 26%]
..............................                                           [ 40%]
tests/base/test_qubits.py ........F.....FF.FFFF..F.FF.F.F.......F....F.. [ 61%]
.                                                                        [ 61%]
tests/base/test_time_evolution.py ..............                         [ 68%]
tests/base/test_utils.py ......................                          [ 78%]
tests/channel/test_channel.py ....................                       [ 87%]
tests/channel/test_finalizer.py ......                                   [ 90%]
tests/channel/test_initializer.py ........                               [ 94%]
tests/channel/test_registers.py .......                                  [ 97%]
tests/channel/test_state.py ..                                           [ 98%]
tests/channel/test_transformer.py ....                                   [100%]

=================================== FAILURES ===================================
_ TestObservable.test_for_success_constructor[test_for_success_observable_constructor3] _

self = <tests.base.test_observable.TestObservable object at 0x7fd025d6a650>
test_for_success_observable_constructor = {'eigen_states': [[(0.7071067811865476+0j), (0.7071067811865476+0j), 0j, 0j], [(0.7071067811865476+0j), (-0.7071067811...j], [(-0.5+0j), (1.5+0j), 0j, 0j], [0j, 0j, (3.5+0j), (-0.5+0j)], [0j, 0j, (-0.5+0j), (3.5+0j)]], 'matrix_dim': 4, ...}

    def test_for_success_constructor(self, test_for_success_observable_constructor):
        """
        __init__メソッドの正常系テスト
        """
        target = test_for_success_observable_constructor["target"]
        observable = Observable(target)
    
        eigen_values = observable.eigen_values
        eigen_states = observable.eigen_states
        matrix = observable.matrix
        matrix_dim = observable.matrix_dim
        ndarray = observable.ndarray
    
        expected_eigen_values = test_for_success_observable_constructor["eigen_values"]
        expected_eigen_states = test_for_success_observable_constructor["eigen_states"]
        expected_matrix = np.array(test_for_success_observable_constructor["matrix"])
        expected_matrix_dim = test_for_success_observable_constructor["matrix_dim"]
        expected_ndarray = np.array(test_for_success_observable_constructor["ndarray"])
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_observable.py:57: AssertionError
_ TestObservable.test_for_success_create_from_ons[test_for_success_create_from_ons2] _

self = <tests.base.test_observable.TestObservable object at 0x7fd025d27610>
test_for_success_create_from_ons = {'eigen_states': [[(0.7071067811865476+0j), (0.7071067811865476+0j), 0j, 0j], [(-0.7071067811865476+0j), (0.7071067811...j], [(-0.5+0j), (1.5+0j), 0j, 0j], [0j, 0j, (3.5+0j), (-0.5+0j)], [0j, 0j, (-0.5+0j), (3.5+0j)]], 'matrix_dim': 4, ...}

    def test_for_success_create_from_ons(self, test_for_success_create_from_ons):
        """
        create_from_onsメソッドの正常系テスト
        """
        observed_values = test_for_success_create_from_ons["observed_values"]
        ons = test_for_success_create_from_ons["ons"]
        observable = create_from_ons(observed_values, ons)
    
        eigen_values = observable.eigen_values
        eigen_states = observable.eigen_states
        matrix = observable.matrix
        matrix_dim = observable.matrix_dim
        ndarray = observable.ndarray
    
        expected_eigen_values = test_for_success_create_from_ons["eigen_values"]
        expected_eigen_states = test_for_success_create_from_ons["eigen_states"]
        expected_matrix = np.array(test_for_success_create_from_ons["matrix"])
        expected_matrix_dim = test_for_success_create_from_ons["matrix_dim"]
        expected_ndarray = np.array(test_for_success_create_from_ons["ndarray"])
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_observable.py:97: AssertionError
_ TestPureQubits.test_for_success_constructor[dict_for_test_pure_qubits_constructor1] _

self = <tests.base.test_pure_qubits.TestPureQubits object at 0x7fd025c8f310>
dict_for_test_pure_qubits_constructor = {'dirac_notation': '(0.5+0j)|00> +\n(0.5+0j)|01> +\n(0.5+0j)|10> +\n(0.5+0j)|11>\n', 'projection': [[[[(0.25+0j), (0.2...+0j), (0.25+0j), (0.25+0j), (0.25+0j)], [(0.25+0j), (0.25+0j), (0.25+0j), (0.25+0j)]], 'projection_matrix_dim': 4, ...}

    def test_for_success_constructor(self, dict_for_test_pure_qubits_constructor):
        """
        __init__メソッドの正常系テスト
        """
        qubits = PureQubits(dict_for_test_pure_qubits_constructor["target"])
>       assert allclose(
            qubits.projection, dict_for_test_pure_qubits_constructor["projection"]
        )

tests/base/test_pure_qubits.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
quantum_simulator/base/utils.py:42: in allclose
    return np.allclose(a, b, RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE)
.venv/lib/python3.7/site-packages/numpy/logic/comparison.py:66: in allclose
    res = isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan).all()
.venv/lib/python3.7/site-packages/numpy/logic/comparison.py:98: in np.around
    return _is_close_complex(a, b, rtol, atol, equal_nan)
numpy/core/_kernel.pyx:923: in numpy.core._kernel.ufunc.__call__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   ValueError: operands could not be broadcast together with shapes (2, 2, 4, 4), (2, 2, 2, 2), (), (), ()

numpy/core/_routines_manipulation.pyx:73: ValueError
_ TestPureQubits.test_for_success_constructor[dict_for_test_pure_qubits_constructor2] _

self = <tests.base.test_pure_qubits.TestPureQubits object at 0x7fd025c50050>
dict_for_test_pure_qubits_constructor = {'dirac_notation': '(0.5+0j)|000> +\n0j|001> +\n0j|010> +\n(0.5+0j)|011> +\n(0.5+0j)|100> +\n0j|101> +\n0j|110> +\n(0....0.25+0j), 0j, 0j, (0.25+0j), (0.25+0j), 0j, ...], [0j, 0j, 0j, 0j, 0j, 0j, ...], ...], 'projection_matrix_dim': 8, ...}

    def test_for_success_constructor(self, dict_for_test_pure_qubits_constructor):
        """
        __init__メソッドの正常系テスト
        """
        qubits = PureQubits(dict_for_test_pure_qubits_constructor["target"])
>       assert allclose(
            qubits.projection, dict_for_test_pure_qubits_constructor["projection"]
        )

tests/base/test_pure_qubits.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
quantum_simulator/base/utils.py:42: in allclose
    return np.allclose(a, b, RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE)
.venv/lib/python3.7/site-packages/numpy/logic/comparison.py:66: in allclose
    res = isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan).all()
.venv/lib/python3.7/site-packages/numpy/logic/comparison.py:98: in isclose
    return _is_close_complex(a, b, rtol, atol, equal_nan)
numpy/core/_kernel.pyx:923: in numpy.core._kernel.ufunc.__call__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   ValueError: operands could not be broadcast together with shapes (2, 2, 2, 2, 8, 8), (2, 2, 2, 2, 2, 2), (), (), ()

numpy/core/_routines_manipulation.pyx:73: ValueError
_______ TestQubits.test_for_failure_is_qubits_dim[invalid_qubits_array3] _______

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c48e50>
invalid_qubits_array = [[[(0.5+0j), 0j, 0j, 0j], [0j, 0j, 0j, (0.5+0j)]], [[(0.5+0j), 0j, 0j, 0j], 0j, 0j, 0j, (0.5+0j)]]

    def test_for_failure_is_qubits_dim(self, invalid_qubits_array):
        """is_qubits_dimメソッドの異常系テスト"""
    
>       array = np.array(invalid_qubits_array)

tests/base/test_qubits.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.7/site-packages/numpy/creation/from_data.py:43: in array
    return core.array(obj, dtype, copy, order, subok, ndmin)
numpy/core/core.pyx:1785: in numpy.core.core.array
    ???
numpy/core/core.pyx:1862: in numpy.core.core.array
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   ValueError: Unsupported dtype object

numpy/core/core.pyx:1935: ValueError
___ TestQubits.test_for_success_resolve_eigen[dict_for_test_resolve_eigen1] ____

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c95c10>
dict_for_test_resolve_eigen = {'eigen_states': [[(0.9238795325112867+0j), (0.3826834323650898+0j)], [(-0.3826834323650899+0j), (0.9238795325112868+0...alues': [(0.8535533905932737+0j), (0.1464466094067262+0j)], 'target': [[(0.75+0j), (0.25+0j)], [(0.25+0j), (0.25+0j)]]}

    def test_for_success_resolve_eigen(self, dict_for_test_resolve_eigen):
        """resolve_eigenメソッドの正常系テスト"""
        target = np.array(dict_for_test_resolve_eigen["target"])
        eigen_values, eigen_states = resolve_eigen(target)
    
        expected_eigen_values = dict_for_test_resolve_eigen["eigen_values"]
        expected_eigen_states = dict_for_test_resolve_eigen["eigen_states"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:78: AssertionError
___ TestQubits.test_for_success_resolve_eigen[dict_for_test_resolve_eigen2] ____

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c8e590>
dict_for_test_resolve_eigen = {'eigen_states': [[0j, 0j, (0.7071067811865476+0j), (-0.7071067811865476+0j)], [(0.816496580927726+0j), 0j, (0.4082482...(0.5+0j), 0j, (0.25+0j), (0.25+0j)], [0j, 0j, 0j, 0j], [(0.25+0j), 0j, (0.25+0j), 0j], [(0.25+0j), 0j, 0j, (0.25+0j)]]}

    def test_for_success_resolve_eigen(self, dict_for_test_resolve_eigen):
        """resolve_eigenメソッドの正常系テスト"""
        target = np.array(dict_for_test_resolve_eigen["target"])
        eigen_values, eigen_states = resolve_eigen(target)
    
        expected_eigen_values = dict_for_test_resolve_eigen["eigen_values"]
        expected_eigen_states = dict_for_test_resolve_eigen["eigen_states"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:78: AssertionError
__ TestQubits.test_for_success_constructor[dict_for_test_qubits_constructor1] __

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bb99d0>
dict_for_test_qubits_constructor = {'eigen_states': [[(0.9238795325112867+0j), (0.3826834323650898+0j)], [(-0.3826834323650899+0j), (0.9238795325112868+0...32737+0j), (0.1464466094067262+0j)], 'is_pure': False, 'matrix': [[(0.75+0j), (0.25+0j)], [(0.25+0j), (0.25+0j)]], ...}

    def test_for_success_constructor(self, dict_for_test_qubits_constructor):
        """__init__メソッドの正常系テスト"""
        target = dict_for_test_qubits_constructor["target"]
        qubits = Qubits(target)
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_qubits_constructor["eigen_values"]
        expected_eigen_states = dict_for_test_qubits_constructor["eigen_states"]
        expected_matrix = np.array(dict_for_test_qubits_constructor["matrix"])
        expected_matrix_dim = dict_for_test_qubits_constructor["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_qubits_constructor["ndarray"])
        expected_qubit_count = dict_for_test_qubits_constructor["qubit_count"]
        expected_is_pure = dict_for_test_qubits_constructor["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:112: AssertionError
__ TestQubits.test_for_success_constructor[dict_for_test_qubits_constructor2] __

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bc1350>
dict_for_test_qubits_constructor = {'eigen_states': [[0j, 0j, (0.7071067811865476+0j), (-0.7071067811865476+0j)], [(0.816496580927726+0j), 0j, (0.4082482...0j), 0j, (0.25+0j), (0.25+0j)], [0j, 0j, 0j, 0j], [(0.25+0j), 0j, (0.25+0j), 0j], [(0.25+0j), 0j, 0j, (0.25+0j)]], ...}

    def test_for_success_constructor(self, dict_for_test_qubits_constructor):
        """__init__メソッドの正常系テスト"""
        target = dict_for_test_qubits_constructor["target"]
        qubits = Qubits(target)
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_qubits_constructor["eigen_values"]
        expected_eigen_states = dict_for_test_qubits_constructor["eigen_states"]
        expected_matrix = np.array(dict_for_test_qubits_constructor["matrix"])
        expected_matrix_dim = dict_for_test_qubits_constructor["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_qubits_constructor["ndarray"])
        expected_qubit_count = dict_for_test_qubits_constructor["qubit_count"]
        expected_is_pure = dict_for_test_qubits_constructor["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:112: AssertionError
__ TestQubits.test_for_success_constructor[dict_for_test_qubits_constructor3] __

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bbf390>
dict_for_test_qubits_constructor = {'eigen_states': [[(0.7071067811865476+0j), 0j, 0j, (0.7071067811865476+0j)]], 'eigen_values': [1.0], 'is_pure': True, 'matrix': [[(0.5+0j), 0j, 0j, (0.5+0j)], [0j, 0j, 0j, 0j], [0j, 0j, 0j, 0j], [(0.5+0j), 0j, 0j, (0.5+0j)]], ...}

    def test_for_success_constructor(self, dict_for_test_qubits_constructor):
        """__init__メソッドの正常系テスト"""
        target = dict_for_test_qubits_constructor["target"]
        qubits = Qubits(target)
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_qubits_constructor["eigen_values"]
        expected_eigen_states = dict_for_test_qubits_constructor["eigen_states"]
        expected_matrix = np.array(dict_for_test_qubits_constructor["matrix"])
        expected_matrix_dim = dict_for_test_qubits_constructor["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_qubits_constructor["ndarray"])
        expected_qubit_count = dict_for_test_qubits_constructor["qubit_count"]
        expected_is_pure = dict_for_test_qubits_constructor["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:112: AssertionError
___________________ TestQubits.test_for_failure_constructor ____________________

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bb91d0>

    def test_for_failure_constructor(self):
        """__init__メソッド 虚数固有値の異常系テスト"""
        with pytest.raises(InitializeError) as error:
            target = [[0.5 + 0j, 0j], [0j, 0.5 * 1j]]
            Qubits(target)
>       assert "与えられたリストには虚数の固有値が存在します" in str(error.value)
E       AssertionError: assert '与えられたリストには虚数の固有値が存在します' in '[ERROR]: リストから導出された固有値群は確率分布に対応しません'
E        +  where '[ERROR]: リストから導出された固有値群は確率分布に対応しません' = str(InitializeError('[ERROR]: リストから導出された固有値群は確率分布に対応しません'))
E        +    where InitializeError('[ERROR]: リストから導出された固有値群は確率分布に対応しません') = <ExceptionInfo InitializeError('[ERROR]: リストから導出された固有値群は確率分布に対応しません') tblen=2>.value

tests/base/test_qubits.py:127: AssertionError
______ TestQubits.test_for_success_generalize[dict_for_test_generalize2] _______

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c50490>
dict_for_test_generalize = {'eigen_states': [[(0.7071067811865476+0j), 0j, 0j, (0.7071067811865476+0j)]], 'eigen_values': [1.0], 'is_pure': True, 'matrix': [[(0.5+0j), 0j, 0j, (0.5+0j)], [0j, 0j, 0j, 0j], [0j, 0j, 0j, 0j], [(0.5+0j), 0j, 0j, (0.5+0j)]], ...}

    def test_for_success_generalize(self, dict_for_test_generalize):
        """generalizeメソッドの正常系テスト"""
        target = dict_for_test_generalize["target"]
        qubits = generalize(target)
    
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_generalize["eigen_values"]
        expected_eigen_states = dict_for_test_generalize["eigen_states"]
        expected_matrix = np.array(dict_for_test_generalize["matrix"])
        expected_matrix_dim = dict_for_test_generalize["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_generalize["ndarray"])
        expected_qubit_count = dict_for_test_generalize["qubit_count"]
        expected_is_pure = dict_for_test_generalize["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:162: AssertionError
______ TestQubits.test_for_success_specialize[dict_for_test_specialize1] _______

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bc1c10>
dict_for_test_specialize = {'ndarray': [(0.7071067811865476+0j), (-0.7071067811865476+0j)], 'projection': [[(0.5+0j), (-0.5+0j)], [(-0.5+0j), (0.5+0j)]], 'projection_matrix': [[(0.5+0j), (-0.5+0j)], [(-0.5+0j), (0.5+0j)]], 'projection_matrix_dim': 2, ...}

    def test_for_success_specialize(self, dict_for_test_specialize):
        """specializeメソッドの正常系テスト"""
        target = dict_for_test_specialize["target"]
        result = specialize(target)
    
        expected_ndarray = dict_for_test_specialize["ndarray"]
        expected_vector = dict_for_test_specialize["vector"]
        expected_qubit_count = dict_for_test_specialize["qubit_count"]
        expected_projection = dict_for_test_specialize["projection"]
        expected_projection_matrix = dict_for_test_specialize["projection_matrix"]
        expected_projection_matrix_dim = dict_for_test_specialize[
            "projection_matrix_dim"
        ]
>       assert allclose(result.ndarray, expected_ndarray)
E       assert False
E        +  where False = allclose(array([-0.70710678+0.j,  0.70710678+0.j]), [(0.7071067811865476+0j), (-0.7071067811865476+0j)])
E        +    where array([-0.70710678+0.j,  0.70710678+0.j]) = <quantum_simulator.base.pure_qubits.PureQubits object at 0x7fd051744d50>.ndarray

tests/base/test_qubits.py:185: AssertionError
______ TestQubits.test_for_success_specialize[dict_for_test_specialize2] _______

self = <tests.base.test_qubits.TestQubits object at 0x7fd025b807d0>
dict_for_test_specialize = {'ndarray': [[(0.7071067811865476+0j), 0j], [0j, (0.7071067811865476+0j)]], 'projection': [[[[(0.5+0j), 0j], [0j, (0.5... 0j, 0j, (0.5+0j)], [0j, 0j, 0j, 0j], [0j, 0j, 0j, 0j], [(0.5+0j), 0j, 0j, (0.5+0j)]], 'projection_matrix_dim': 4, ...}

    def test_for_success_specialize(self, dict_for_test_specialize):
        """specializeメソッドの正常系テスト"""
        target = dict_for_test_specialize["target"]
        result = specialize(target)
    
        expected_ndarray = dict_for_test_specialize["ndarray"]
        expected_vector = dict_for_test_specialize["vector"]
        expected_qubit_count = dict_for_test_specialize["qubit_count"]
        expected_projection = dict_for_test_specialize["projection"]
        expected_projection_matrix = dict_for_test_specialize["projection_matrix"]
        expected_projection_matrix_dim = dict_for_test_specialize[
            "projection_matrix_dim"
        ]
>       assert allclose(result.ndarray, expected_ndarray)
E       assert False
E        +  where False = allclose(array([[-0.70710678+0.j,  0.        +0.j],\n       [ 0.        +0.j, -0.70710678+0.j]]), [[(0.7071067811865476+0j), 0j], [0j, (0.7071067811865476+0j)]])
E        +    where array([[-0.70710678+0.j,  0.        +0.j],\n       [ 0.        +0.j, -0.70710678+0.j]]) = <quantum_simulator.base.pure_qubits.PureQubits object at 0x7fd051759210>.ndarray

tests/base/test_qubits.py:185: AssertionError
_ TestQubits.test_for_success_convex_combination[dict_for_test_convex_combination1] _

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c95410>
dict_for_test_convex_combination = {'eigen_states': [[(0.7071067811865476+0j), 0j, 0j, (0.7071067811865476+0j)]], 'eigen_values': [1.0], 'is_pure': True, 'matrix': [[(0.5+0j), 0j, 0j, (0.5+0j)], [0j, 0j, 0j, 0j], [0j, 0j, 0j, 0j], [(0.5+0j), 0j, 0j, (0.5+0j)]], ...}

    def test_for_success_convex_combination(self, dict_for_test_convex_combination):
        """convex_combinationメソッドの正常系テスト"""
        probabilities = dict_for_test_convex_combination["probabilities"]
        qubits_list = dict_for_test_convex_combination["qubits_list"]
        qubits = convex_combination(probabilities, qubits_list)
    
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_convex_combination["eigen_values"]
        expected_eigen_states = dict_for_test_convex_combination["eigen_states"]
        expected_matrix = np.array(dict_for_test_convex_combination["matrix"])
        expected_matrix_dim = dict_for_test_convex_combination["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_convex_combination["ndarray"])
        expected_qubit_count = dict_for_test_convex_combination["qubit_count"]
        expected_is_pure = dict_for_test_convex_combination["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:226: AssertionError
_ TestQubits.test_for_success_create_from_ons[dict_for_test_create_from_ons1] __

self = <tests.base.test_qubits.TestQubits object at 0x7fd025c62990>
dict_for_test_create_from_ons = {'eigen_states': [[(0.7071067811865476+0j), (0.7071067811865476+0j)], [(-0.7071067811865476+0j), (0.7071067811865476+0j)]], 'eigen_values': [0.25, 0.75], 'is_pure': False, 'matrix': [[(0.5+0j), (-0.25+0j)], [(-0.25+0j), (0.5+0j)]], ...}

    def test_for_success_create_from_ons(self, dict_for_test_create_from_ons):
        """create_from_onsメソッドの正常系テスト"""
        probabilities = dict_for_test_create_from_ons["probabilities"]
        ons = dict_for_test_create_from_ons["ons"]
        qubits = create_from_ons(probabilities, ons)
    
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_create_from_ons["eigen_values"]
        expected_eigen_states = dict_for_test_create_from_ons["eigen_states"]
        expected_matrix = np.array(dict_for_test_create_from_ons["matrix"])
        expected_matrix_dim = dict_for_test_create_from_ons["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_create_from_ons["ndarray"])
        expected_qubit_count = dict_for_test_create_from_ons["qubit_count"]
        expected_is_pure = dict_for_test_create_from_ons["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:270: AssertionError
______ TestQubits.test_for_success_combine[dict_for_test_qubits_combine1] ______

self = <tests.base.test_qubits.TestQubits object at 0x7fd025b80a90>
dict_for_test_qubits_combine = {'eigen_states': [[(0.7071067811865476+0j), 0j, 0j, (0.7071067811865476+0j), 0j, 0j, ...], [0j, 0j, (1+0j), 0j, 0j, 0j..., [(0.25+0j), 0j, 0j, (0.25+0j), 0j, 0j, ...], [0j, 0j, 0j, 0j, 0j, 0j, ...], [0j, 0j, 0j, 0j, 0j, 0j, ...], ...], ...}

    def test_for_success_combine(self, dict_for_test_qubits_combine):
        """combineメソッドの正常系テスト"""
        qubits_list = dict_for_test_qubits_combine["qubits_list"]
        qubits = combine(qubits_list[0], qubits_list[1])
    
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_qubits_combine["eigen_values"]
        expected_eigen_states = dict_for_test_qubits_combine["eigen_states"]
        expected_matrix = np.array(dict_for_test_qubits_combine["matrix"])
        expected_matrix_dim = dict_for_test_qubits_combine["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_qubits_combine["ndarray"])
        expected_qubit_count = dict_for_test_qubits_combine["qubit_count"]
        expected_is_pure = dict_for_test_qubits_combine["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:341: AssertionError
_ TestQubits.test_for_success_multiple_combine[dict_for_test_qubits_multiple_combine1] _

self = <tests.base.test_qubits.TestQubits object at 0x7fd025bbf090>
dict_for_test_qubits_multiple_combine = {'eigen_states': [[(0.7071067811865476+0j), 0j, 0j, (0.7071067811865476+0j), 0j, 0j, ...], [0j, 0j, (1+0j), 0j, 0j, 0j..., [(0.25+0j), 0j, 0j, (0.25+0j), 0j, 0j, ...], [0j, 0j, 0j, 0j, 0j, 0j, ...], [0j, 0j, 0j, 0j, 0j, 0j, ...], ...], ...}

    def test_for_success_multiple_combine(self, dict_for_test_qubits_multiple_combine):
        """multiple_combineメソッドの正常系テスト"""
        qubits_list = dict_for_test_qubits_multiple_combine["qubits_list"]
        qubits = multiple_combine(qubits_list)
    
        eigen_values = qubits.eigen_values
        eigen_states = qubits.eigen_states
        matrix = qubits.matrix
        matrix_dim = qubits.matrix_dim
        ndarray = qubits.ndarray
        qubit_count = qubits.qubit_count
        is_pure = qubits.is_pure()
    
        expected_eigen_values = dict_for_test_qubits_multiple_combine["eigen_values"]
        expected_eigen_states = dict_for_test_qubits_multiple_combine["eigen_states"]
        expected_matrix = np.array(dict_for_test_qubits_multiple_combine["matrix"])
        expected_matrix_dim = dict_for_test_qubits_multiple_combine["matrix_dim"]
        expected_ndarray = np.array(dict_for_test_qubits_multiple_combine["ndarray"])
        expected_qubit_count = dict_for_test_qubits_multiple_combine["qubit_count"]
        expected_is_pure = dict_for_test_qubits_multiple_combine["is_pure"]
    
        for expected_index in range(len(expected_eigen_values)):
            is_passed = False
    
            for result_index in range(len(eigen_values)):
                if isclose(
                    expected_eigen_values[expected_index], eigen_values[result_index]
                ) and allclose(
                    expected_eigen_states[expected_index],
                    eigen_states[result_index].vector,
                ):
                    is_passed = True
    
>           assert is_passed
E           assert False

tests/base/test_qubits.py:428: AssertionError
=========================== short test summary info ============================
FAILED tests/base/test_observable.py::TestObservable::test_for_success_constructor[test_for_success_observable_constructor3]
FAILED tests/base/test_observable.py::TestObservable::test_for_success_create_from_ons[test_for_success_create_from_ons2]
FAILED tests/base/test_pure_qubits.py::TestPureQubits::test_for_success_constructor[dict_for_test_pure_qubits_constructor1]
FAILED tests/base/test_pure_qubits.py::TestPureQubits::test_for_success_constructor[dict_for_test_pure_qubits_constructor2]
FAILED tests/base/test_qubits.py::TestQubits::test_for_failure_is_qubits_dim[invalid_qubits_array3]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_resolve_eigen[dict_for_test_resolve_eigen1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_resolve_eigen[dict_for_test_resolve_eigen2]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_constructor[dict_for_test_qubits_constructor1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_constructor[dict_for_test_qubits_constructor2]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_constructor[dict_for_test_qubits_constructor3]
FAILED tests/base/test_qubits.py::TestQubits::test_for_failure_constructor - ...
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_generalize[dict_for_test_generalize2]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_specialize[dict_for_test_specialize1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_specialize[dict_for_test_specialize2]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_convex_combination[dict_for_test_convex_combination1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_create_from_ons[dict_for_test_create_from_ons1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_combine[dict_for_test_qubits_combine1]
FAILED tests/base/test_qubits.py::TestQubits::test_for_success_multiple_combine[dict_for_test_qubits_multiple_combine1]
======================== 18 failed, 199 passed in 2.93s ========================
